[package]
name = "os"
version = "0.1.0"
edition = "2018"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dependencies]

bootloader = "0.9.8" # we don't want to implement our own bootloader, since they're hardware-specific and boring.
                     # The "bootloader" crate implements a basic BIOS bootloader *without* any C dependencies --
                     # just Rust and inline assembly!

volatile = "0.2.6"  # allows for Volatile wrapper type with 'read' and 'write' methods; internally uses
                    # read_volatile() and write_volatile() functions of the core library, guaranteeing that
                    # reads/writes are not optimized away

spin = "0.5.2" # gives access to spin::Mutex, which is a spinlocking Mutex. Needed because we can't use the
               # std::Mutex

x86_64 = "0.14.2"   # if we actually want to be able to shut down our OS from within QEMU, we'd need to implement an APM or ACPI
                    # interface. That's really complex, but there's a shortcut -- QEMU supports a special "isa-debug-exit" device
                    # that allows the guest system to easily exit QEMU. We need to pass a -device argument to QEMU through
                    # bootimage, as shown below. 'iobase' and 'iosize' specify the "I/O Port" through which the device can be
                    # reached from our kernel (sick!!!) -> use 'in' and 'out' CPU instructions, which take a 'port number'
                    # (iobase -- 0xf4) and a data byte (iosize -- 0x04 [4 bytes/32 bits)
                    # when we write a value to iobase, it causes QEMU to exit with a status "value << 1 | 1". So:
                    # when value = 0, "(0 << 1) | 1 = 1", and when value = 1, "(1 << 1) | 1 = 3". So, we can exit with status
                    # 1 or 3. To avoid having to manually call the 'in' and 'out' CPU instructions, we will use the "x86_64" crate.


[package.metadata.bootimage]                                        # this is the package that allows us to use the in-QEMU
                                                                    # shutdown using I/O
test-success-exit-code = 33                                         # 33 = (0x10 << 1 ) | 1
test-args = ["-device", "isa-debug-exit,iobase=0xf4,iosize=0x04"]   # defines I/O port


[dependencies.lazy_static]                          # adds "lazy_static" dependency which allows for lazy initialization of statics
                                                    # (initializes the first time the variable is referenced, instead of at
                                                    # compile-time)
version = "1.0"
features = ["spin_no_std"]                          # allows crate to run without std library



# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# when Rust panics, it unwinds the stack in order to call destructors on all stack-allocated items.
# however, stack unwinding is highly OS-dependent and relies on an unstable "language item" called
# "eh_personality". In order to operate without a standard library, we will disable stack unwinding
# by instructing Rust to simply abort upon a panic (these are kept for posterity; they will never be re-enabled
#[profile.dev]                              # this causes a "duplicate lang item" bug in Cargo. So instead, we're just going to use
                                            # the "panic-strategy" : "abort" in our target JSON config
#panic = "abort"
#[profile.release]
#panic = "abort"

